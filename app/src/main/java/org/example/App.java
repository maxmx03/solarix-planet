/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class App {
  public static List<Pessoa> funcionarios = new ArrayList<>();

  public static void main(String[] args) {
    funcionarios.add(new Pessoa("Maria", LocalDate.of(2000, 10, 18), new BigDecimal(2009.44), "Operador"));
    funcionarios.add(new Pessoa("João", LocalDate.of(1990, 5, 12), new BigDecimal(2284.38), "Operador"));
    funcionarios.add(new Pessoa("Caio", LocalDate.of(1961, 5, 2), new BigDecimal(9836.14), "Coordenador"));
    funcionarios.add(new Pessoa("Miguel", LocalDate.of(1988, 10, 14), new BigDecimal(19119.88), "Diretor"));
    funcionarios.add(new Pessoa("Alice", LocalDate.of(1995, 1, 5), new BigDecimal(2234.68), "Recepcionista"));
    funcionarios.add(new Pessoa("Heitor", LocalDate.of(1999, 11, 19), new BigDecimal(1582.72), "Operador"));
    funcionarios.add(new Pessoa("Arthur", LocalDate.of(1993, 3, 31), new BigDecimal(4071.84), "Contador"));
    funcionarios.add(new Pessoa("Laura", LocalDate.of(1994, 7, 8), new BigDecimal(3017.45), "Gerente"));
    funcionarios.add(new Pessoa("Heloísa", LocalDate.of(2003, 5, 24), new BigDecimal(1606.85), "Eletricista"));
    funcionarios.add(new Pessoa("Helena", LocalDate.of(1996, 9, 2), new BigDecimal(2799.93), "Gerente"));

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    for (Pessoa pessoa : funcionarios) {
      String dataFormatada = pessoa.getDataNascimento().format(formatter);
      BigDecimal aumento = pessoa.getSalario().multiply(new BigDecimal(1.10));
      System.out.printf(
          "%s nasceu em %s e recebia R$ %.2f por mês, mas com aumento de 10%% agora recebe R$%.2f por mês.\n",
          pessoa.getNome(),
          dataFormatada,
          pessoa.getSalario().doubleValue(),
          aumento.doubleValue());
      System.out.printf(" É um(a) %s.\n", pessoa.getFuncao());
    }

    System.out.println("\n===========FUNCIONARIOS COM SUAS RESPECTIVAS FUNÇÕES============\n");

    Map<String, List<Pessoa>> funcionariosPorFuncao = new HashMap<>();
    for (Pessoa pessoa : funcionarios) {
      String funcao = pessoa.getFuncao();
      if (!funcionariosPorFuncao.containsKey(funcao)) {
        funcionariosPorFuncao.put(funcao, new ArrayList<>());
      }
      funcionariosPorFuncao.get(funcao).add(pessoa);
    }
    for (String funcao : funcionariosPorFuncao.keySet()) {
      System.out.println("Função: " + funcao);
      for (Pessoa p : funcionariosPorFuncao.get(funcao)) {
        System.out.println("  - " + p.getNome());
      }
    }

    System.out.println("\n===========ANIVERSARIANTES DO MÊS 10 AO 12============\n");
    funcionarios.stream()
        .filter(p -> p.getDataNascimento().getMonthValue() >= 10 && p.getDataNascimento().getMonthValue() <= 12)
        .collect(Collectors.toList())
        .forEach(pessoa -> System.out.printf("%s nasceu em %s.\n", pessoa.getNome(), pessoa.getDataNascimento()));

    System.out.println("\n=========== FUNCIONÁRIO COM MAIOR IDADE ===========\n");
    funcionarios.stream()
        .max(Comparator.comparing(Pessoa::getDataNascimento))
        .ifPresent(pessoaMaisVelha -> {
          LocalDate hoje = LocalDate.now();
          long idade = ChronoUnit.YEARS.between(pessoaMaisVelha.getDataNascimento(), hoje);
          System.out.printf("Nome: %s, Idade: %d anos%n", pessoaMaisVelha.getNome(), idade);
        });

    System.out.println("\n=========== LISTA DE FUNCIONÁRIOS EM ORDEM ALFABÉTICA ===========\n");
    funcionarios.stream()
        .sorted(Comparator.comparing(Pessoa::getNome))
        .forEach(
            pessoa -> System.out.printf("%s, Data de Nascimento: %s%n", pessoa.getNome(), pessoa.getDataNascimento()));

    System.out.println("\n=========== TOTAL DOS SALÁRIOS ===========\n");
    BigDecimal totalSalarios = funcionarios.stream()
        .map(Pessoa::getSalario)
        .reduce(BigDecimal.ZERO, BigDecimal::add);
    System.out.printf("Total dos salários: R$ %.2f%n", totalSalarios);

    System.out.println("\n=========== SALÁRIOS EM SALÁRIOS MÍNIMOS ===========\n");
    BigDecimal SALARIO_MINIMO = new BigDecimal("1212.00");
    for (Pessoa pessoa : funcionarios) {
      BigDecimal salariosMinimos = pessoa.getSalario()
          .divide(SALARIO_MINIMO, 2, RoundingMode.HALF_UP);
      System.out.printf("Funcionário: %s, Salários Mínimos: %.2f%n",
          pessoa.getNome(), salariosMinimos);
    }
  }
}
